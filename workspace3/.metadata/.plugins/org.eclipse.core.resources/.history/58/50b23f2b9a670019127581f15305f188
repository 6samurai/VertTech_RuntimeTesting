IMPORTS{
	
import com.liftmania.Lift;
import com.liftmania.LiftController;
import com.liftmania.gui.Shaft;
import com.liftmania.gui.LiftsVisualiser;
import java.util.ArrayList;
import java.util.List;
}

GLOBAL {
		VARIABLES {		

		%%int maxFloor = 5;
		%%int minFloor = 0;
		List<Integer> serviceList = new ArrayList<Integer>();
		List<Integer> openDoorCount = new ArrayList<Integer>();
		List<Integer> closeDoorCount = new ArrayList<Integer>();
		int tempVal = 0;
		boolean service = false;
		boolean missedOpenUp = false;
		boolean firstIter = true;
		boolean missedOpenDown = false;
		boolean missedOpen = false;

		
	}
		
	EVENTS{
		callLiftToFloor(int floor) = {*.callLiftToFloor(floor)}
  		moveLift(Lift liftNumber, int floorNumber) = {*.moveLift(liftNumber,floorNumber)}
  	%%	openLiftDoor(int DestLift) = {*.openLiftDoor(DestLift)}
	%%	closeLiftDoor(int Lift) = {*.closeLiftDoor(Lift)}
		animateUp(int currentFloorUp) =  {*.animateUp(currentFloorUp)}
		animateDown(int currentFloorDown) =  {*.animateDown(currentFloorDown)}
 		
	}
	
	PROPERTY LiftControllerProperties{
		STATES{
			BAD{
				error				
			}
			NORMAL{
				valid
			}
			STARTING{
				valid
			}
		}
		
		TRANSITIONS{				
		valid -> valid[callLiftToFloor\ serviceList.isEmpty() || !serviceList.contains(floor)  \firstIter = false;System.out.println("Button Call. floor:"+ floor );serviceList.add(floor);]

		valid -> valid[animateDown \!missedOpenDown && !firstIter \
				if(!serviceList.isEmpty()){
					for(int i =0;i<serviceList.size();i++){
						if(currentFloorDown==serviceList.get(i)){
							missedOpenDown = true;
						}		
					}
				} 	
			]
		valid -> error[animateDown \missedOpenUp ||missedOpenDown || missedOpen || serviceList.isEmpty()\System.out.println("Missed floor servicing - lift moving down");]
		
		valid -> valid[animateUp \!missedOpenUp && !firstIter\ System.out.println("currentFloorUp" + currentFloorUp);
				if(!serviceList.isEmpty()){
					for(int i =0;i<serviceList.size();i++){
						if(currentFloorUp==serviceList.get(i)){
							missedOpenUp = true;
							
						}		
					}
				} 	
			]
		valid -> error[animateUp \missedOpenUp ||missedOpenDown || missedOpen || serviceList.isEmpty()\System.out.println("Missed floor servicing - lift moving up");]
					
		}
	}


	FOREACH (Lift lift)
    {
		VARIABLES {
			int id;
			int curFloor;
			boolean liftIsMoving= false;	
			boolean doorIsOpen = false;
			int openLiftCount = 0;

			Clock closeDoorClock = new Clock();		
			Clock moveLiftClock = new Clock();	
		}
		
		EVENTS{
			setMoving(boolean moveLift) 			= 	{Lift l.setMoving(moveLift)}	where{lift = l;}
			closeDoors() 							= 	{Lift l.closeDoors()}			where{lift = l;}
			openDoors() 							= 	{Lift l.openDoors()}			where{lift = l;}
			setBetweenFloors(boolean betweenFloors) = 	{Lift l.setBetweenFloors(betweenFloors) }	where{lift = l;}
		}
		
		PROPERTY LiftProperties{
			STATES{
				BAD{
					errorState
				}
				NORMAL{
					doorOpen { curFloor = lift.getFloor();System.out.println("open door floor: "+curFloor);}
	
					moveLift{ curFloor = lift.getFloor();}
					doorClosed { curFloor = lift.getFloor();System.out.println("close floor: "+curFloor);}
				}
				STARTING{
					doorClosed {id = lift.getId(); curFloor = lift.getFloor();System.out.println("floor: "+curFloor); }
				}
			}
			
			TRANSITIONS{
				doorOpen ->errorState[closeDoors\ closeDoorClock.compareTo(3)<0 \System.out.println("Door closed before specified delay");]
				doorOpen -> errorState[setMoving(liftIsMoving)\doorIsOpen\System.out.println("Move call received when door is open");]
				doorClosed -> errorState[setMoving(liftIsMoving)\moveLiftClock.compareTo(3) > 0\System.out.println("Lift moved after more than 3 seconds error" );]
			%%	doorOpen -> errorState[closeDoors\curFloor<minFloor || curFloor>maxFloor\System.out.println("Lift moved beyond specified limit");]
				moveLift ->errorState[setMoving()\serviceList.isEmpty()\System.out.println("Lift is moving when no service is present");]
				moveLift ->errorState[openDoors()\missedOpenUp ||missedOpenDown || missedOpen \System.out.println("Lift skipped a service floor request" + missedOpenUp +missedOpenDown + missedOpen);]
				doorOpen -> errorState[openDoors()\openLiftCount%2 ==0\System.out.println("open and close door not alternating - open"); ]
				doorClosed -> errorState[closeDoors()\openLiftCount%2 ==1\System.out.println("open and close door not alternating - close"); ]
				doorClosed -> errorState[setBetweenFloors(betweenFloors)\betweenFloors\System.out.println("lift stopped in between floors - door closed"); ]
				doorOpen -> errorState[setBetweenFloors(betweenFloors)\betweenFloors\System.out.println("lift stopped in between floors - door open"); ]
				
				
				doorClosed -> moveLift[setMoving(liftIsMoving)\!doorIsOpen && !liftIsMoving  \liftIsMoving=true;System.out.println("Lift is moving");]
				doorClosed -> doorOpen[openDoors\!doorIsOpen && !liftIsMoving && openLiftCount%2 ==0  \ openLiftCount++; doorIsOpen=true;closeDoorClock.reset() ;System.out.println("Door is open");]
				
				moveLift -> doorOpen[openDoors\!doorIsOpen && liftIsMoving && openLiftCount%2 ==0 \
					openLiftCount++; doorIsOpen = true;liftIsMoving=false;closeDoorClock.reset(); curFloor = lift.getFloor();System.out.println("Destination reached from moving +"+curFloor );		
					if(!serviceList.isEmpty())
					serviceList.remove(Integer.valueOf(curFloor));
					else if(!firstIter)
					missedOpen = true;	
					
				]		
				moveLift -> moveLift[setMoving(liftIsMoving)\!doorIsOpen && liftIsMoving \System.out.println("Lift moving to next floor : " + liftIsMoving );]
				doorOpen ->doorClosed[closeDoors\doorIsOpen && !liftIsMoving && closeDoorClock.compareTo(3)>=0 && openLiftCount%2 ==1 \openLiftCount--;moveLiftClock.reset();doorIsOpen=false;System.out.println("Door is closed due to timer");]
				doorClosed -> doorClosed[setMoving()\ \System.out.println("Door is closed and idle");]
				
			
			}	
		}			
	}
}
	