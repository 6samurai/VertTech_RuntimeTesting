package inputGenerator;

import java.io.FileNotFoundException;
import java.util.Random;

import com.liftmania.Lift;
import com.liftmania.LiftController;

import junit.framework.Assert;
import nz.ac.waikato.modeljunit.Action;
import nz.ac.waikato.modeljunit.GraphListener;
import nz.ac.waikato.modeljunit.GreedyTester;
import nz.ac.waikato.modeljunit.StopOnFailureListener;
import nz.ac.waikato.modeljunit.coverage.ActionCoverage;
import nz.ac.waikato.modeljunit.coverage.StateCoverage;
import nz.ac.waikato.modeljunit.coverage.TransitionCoverage;
import nz.ac.waikato.modeljunit.coverage.TransitionPairCoverage;
import nz.ac.waikato.modeljunit.timing.Time;
import nz.ac.waikato.modeljunit.timing.TimedFsmModel;
import nz.ac.waikato.modeljunit.timing.TimedModel;

import org.junit.Test;

import com.liftmania.*;

import liftModel.ServiceList;

import java.util.ArrayList;


import java.util.concurrent.TimeUnit;

import junit.framework.Assert;

import org.junit.Test;

import inputGeneratorStates.ModelTesting_InputGeneratorStates;

public class ModelTesting_InputGenerator implements TimedFsmModel{ 

	private static final int PROBABILITY_TOTAL = 100;
	private static final int PROBABILITY_BUTTON_PRESS = 20;
    private ModelTesting_InputGeneratorStates modelState = ModelTesting_InputGeneratorStates.VALID;
    private	int numFloors = 0;
    private int numLifts = 0;
    private Random random = new Random();
    private LiftController sut;
    private Lift[] lifts;
    //private ArrayList<ServiceList> serviceList;
    private ArrayList<Integer> serviceList;
    private ArrayList<Integer> openLifts;
    private boolean check = false;
    private String errorMsg = "";
    private boolean firstIter = true;
    private int index = 0;
	@Time
    public int now;
	
    @Override
    public int getNextTimeIncrement(Random random) {
        return 1;
    }
	
    @Override
    public ModelTesting_InputGeneratorStates getState() {
        return modelState;
    }

    @Override
    public void reset(boolean reset) {
    	 modelState = ModelTesting_InputGeneratorStates.VALID;
        
         if (reset) {
        	 boolean firstIter = true;
             //assuming range of floors is between 0 and random max number
        	 numFloors = random.nextInt(10) + 2;
             numLifts = random.nextInt(10) + 2;
             
            // numFloors =5;
           //  numLifts =5;
             sut = new LiftController(numFloors, numLifts, false);

             lifts = sut.getLifts();

             serviceList = new ArrayList<Integer>();
             openLifts = new ArrayList<Integer>();
             now = 0;   
             check = false;    
             errorMsg = "";
         }
    }
	
    

    public boolean buttonPressGuard() {
 //       System.out.println("lift call guard");
        return  random.nextInt(PROBABILITY_TOTAL) < PROBABILITY_BUTTON_PRESS  || firstIter;
    }

    //idle to servicing states through callLiftToFloor
    public @Action
    void buttonPress() {

    	 firstIter = false;
        int counter = 0;

        modelState = ModelTesting_InputGeneratorStates.VALID;
        int randomFloorCall = random.nextInt(numFloors);
        
  
        if(serviceList.size()==0){
        	serviceList.add(randomFloorCall);
        }else{
        	if(!(serviceList.contains(randomFloorCall))){
        		serviceList.add(randomFloorCall);
        	}     	
        }
        int randomBehaviour = random.nextInt(2);
       if(randomBehaviour==0)
        	sut.inputAction(false, 0,randomFloorCall);
        else{
        	int randomLiftNumber = random.nextInt(numLifts);
        	sut.inputAction(true, randomLiftNumber,randomFloorCall);
         //	sut.moveLift(randomLiftNumber, randomFloorCall);
        }
       

    }
    
    public boolean verifyBehaviourGuard() {

        return getState().equals(ModelTesting_InputGeneratorStates.VALID);
    }

    //idle to servicing states through callLiftToFloor
    public @Action
    void verifyBehaviour() {
        check = false;
        //to check if all of the call requests have been serviced
        modelState = ModelTesting_InputGeneratorStates.VALID;
        lifts = sut.getLifts();
        if (!serviceList.isEmpty()  && lifts.length!=0)
        	  errorMsg = "";
            for (int i = 0; i < lifts.length; i++) {
            	

            	if ((lifts[i].isOpen()) &&(lifts[i].isMoving())) {
           		 check = true;
           		errorMsg = "Lift is open and moving";
                    break; 
           		  
            	}
            	
            	if (!(lifts[i].isMoving()) &&(lifts[i].getBetweenFloors())) {
           		 check = true;
           		 errorMsg = "Lift is stationary and between floors";
                    break; 
           		  
            	}
            	
            	if ((lifts[i].isOpen()) &&(lifts[i].getBetweenFloors())) {
            		 check = true;
            		 errorMsg = "Lift is open and between floors";
                     break; 
            		  
            	}
                //if all lifts are closed and stationary with items still required to be serviced - lift is invalid behaviour
                if (lifts[i].isOpen() && serviceList.size() == 0) {
                    check = true;
                    errorMsg = "Lift is open when no tasks are present";
                    break;
                }
                
                //if all lifts are closed and stationary with items still required to be serviced - lift is invalid behaviour
                if (lifts[i].isMoving() && serviceList.size() == 0) {
                    check = true;
                    errorMsg = "Lift is moving when no tasks are present";
                    break;
                }


                if (!(lifts[i].getFloor() < numFloors && lifts[i].getFloor() >= 0)) {
                    check = true;
                    errorMsg = "Lift  has moved beyond specified limits";
                    break;
                }
                
                
            	if(lifts[i].isOpen() && !lifts[i].isMoving() && serviceList.contains(lifts[i].getFloor())){
            		openLifts.add(i);
            	}
            	
            	if(!lifts[i].isOpen() && !lifts[i].isMoving() && openLifts.contains(i)){
            		for(int j=0; j<serviceList.size(); j++) {
            		    if (serviceList.get(j).equals(i)) {
            		    	serviceList.remove(j);
            		    	break;
            		    }
            		}
            		for(int j=0; j<openLifts.size(); j++) {
            		    if (openLifts.get(j).equals(i)) {
            		    	openLifts.remove(j);
            		    	break;
            		    }
            		}
            		
            	}
   	
            }
    
        Assert.assertEquals(errorMsg, false, check);
        
        try {
            Thread.sleep(50);
        } catch (Exception e) {
    }
    }
    
    
    void unguardedAction() throws InterruptedException {
        System.out.println("current time " + now);
        TimeUnit.SECONDS.sleep((getNextTimeIncrement(new Random())));


    }
    
    @Test
    public void LiftSystemModelRunner() throws FileNotFoundException {

        final TimedModel timedModel = new TimedModel(new ModelTesting_InputGenerator());
        //    timedModel.setTimeoutProbability(0.5);

        final GreedyTester tester = new GreedyTester(timedModel);
        tester.setRandom(new Random(100));
        tester.setResetProbability(0.0000001);
        final GraphListener graphListener = tester.buildGraph();
        //    graphListener.printGraphDot("/users/Owner/Desktop/output.dot");
        tester.addListener(new StopOnFailureListener());
        tester.addListener("verbose");
        tester.addCoverageMetric(new TransitionPairCoverage());
        tester.addCoverageMetric(new TransitionCoverage());
        tester.addCoverageMetric(new StateCoverage());
        tester.addCoverageMetric(new ActionCoverage());
        tester.generate(1000);
        tester.printCoverage();
    }
    
    
    boolean checkIfLiftsAreClosed() {
        check = true;
        lifts = sut.getLifts();
        for (int i = 0; i < lifts.length; i++) {

            if (!lifts[i].isMoving() && !lifts[i].isOpen()) {
                check = false;
                break;
            }
        }
        return check;
    }
}
